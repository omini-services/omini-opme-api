// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Omini.Opme.Infrastructure.Contexts;

#nullable disable

namespace Omini.Opme.Migrations.Migrations
{
    [DbContext(typeof(OpmeContext))]
    partial class OpmeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("hospitalcode_sequence");

            modelBuilder.HasSequence("insurancecompanycode_sequence");

            modelBuilder.HasSequence("internalspecialistcode_sequence");

            modelBuilder.HasSequence("itemcode_sequence");

            modelBuilder.HasSequence("patientcode_sequence");

            modelBuilder.HasSequence("physiciancode_sequence");

            modelBuilder.Entity("Omini.Opme.Domain.Admin.InternalSpecialist", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValueSql("nextval ('internalspecialistcode_sequence')");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Code");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("InternalSpecialists", (string)null);

                    b.HasData(
                        new
                        {
                            Code = "1",
                            CreatedBy = new Guid("c8c5ce24-820f-41ba-8560-d7a282d80d29"),
                            CreatedOn = new DateTime(2024, 8, 6, 23, 39, 11, 881, DateTimeKind.Utc).AddTicks(2800),
                            Email = "comercial@fratermedical.com.br",
                            Telefone = "(11) 3829-9400"
                        });
                });

            modelBuilder.Entity("Omini.Opme.Domain.Authentication.OpmeUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("OpmeUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c8c5ce24-820f-41ba-8560-d7a282d80d29"),
                            CreatedBy = new Guid("c8c5ce24-820f-41ba-8560-d7a282d80d29"),
                            CreatedOn = new DateTime(2024, 8, 6, 23, 39, 11, 881, DateTimeKind.Utc).AddTicks(2700),
                            Email = "test@invalid.com",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("e6211f68-cfcd-40e9-a31a-bd0dcf4b4052"),
                            CreatedBy = new Guid("c8c5ce24-820f-41ba-8560-d7a282d80d29"),
                            CreatedOn = new DateTime(2024, 8, 6, 23, 39, 11, 881, DateTimeKind.Utc).AddTicks(2700),
                            Email = "dacceto@gmail.com",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("77e48701-6371-4e3e-8d92-9db4a2bc1e5f"),
                            CreatedBy = new Guid("c8c5ce24-820f-41ba-8560-d7a282d80d29"),
                            CreatedOn = new DateTime(2024, 8, 6, 23, 39, 11, 881, DateTimeKind.Utc).AddTicks(2700),
                            Email = "guilherme_or@outlook.com",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Omini.Opme.Domain.BusinessPartners.Hospital", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValueSql("nextval ('hospitalcode_sequence')");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Code");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Hospitals", (string)null);
                });

            modelBuilder.Entity("Omini.Opme.Domain.BusinessPartners.InsuranceCompany", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValueSql("nextval ('insurancecompanycode_sequence')");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Code");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("InsuranceCompanies", (string)null);
                });

            modelBuilder.Entity("Omini.Opme.Domain.BusinessPartners.Patient", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValueSql("nextval ('patientcode_sequence')");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Code");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Patients", (string)null);
                });

            modelBuilder.Entity("Omini.Opme.Domain.BusinessPartners.Physician", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValueSql("nextval ('physiciancode_sequence')");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Crm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Cro")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Code");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Physicians", (string)null);
                });

            modelBuilder.Entity("Omini.Opme.Domain.Sales.Quotation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HospitalCode")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<string>("HospitalName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("InsuranceCompanyCode")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<string>("InsuranceCompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("InternalSpecialistCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Number"));

                    b.Property<string>("PatientCode")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PayingSourceType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhysicianCode")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<double>("Total")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("HospitalCode");

                    b.HasIndex("InsuranceCompanyCode");

                    b.HasIndex("PatientCode");

                    b.HasIndex("PhysicianCode");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Quotations", (string)null);
                });

            modelBuilder.Entity("Omini.Opme.Domain.Sales.QuotationItem", b =>
                {
                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid");

                    b.Property<int>("LineId")
                        .HasColumnType("integer");

                    b.Property<string>("AnvisaCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("AnvisaDueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("LineOrder")
                        .HasColumnType("integer");

                    b.Property<double>("LineTotal")
                        .HasColumnType("double precision");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<string>("ReferenceCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("double precision");

                    b.HasKey("DocumentId", "LineId");

                    b.HasIndex("ItemCode");

                    b.ToTable("QuotationItems", (string)null);
                });

            modelBuilder.Entity("Omini.Opme.Domain.Warehouse.Item", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValueSql("nextval ('itemcode_sequence')");

                    b.Property<string>("AnvisaCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("AnvisaDueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Cst")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NcmCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SalesName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SupplierCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SusCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Uom")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Code");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Items", (string)null);
                });

            modelBuilder.Entity("Omini.Opme.Domain.Admin.InternalSpecialist", b =>
                {
                    b.HasOne("Omini.Opme.Domain.Authentication.OpmeUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Omini.Opme.Domain.Authentication.OpmeUser", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.OwnsOne("Omini.Opme.Domain.ValueObjects.PersonName", "Name", b1 =>
                        {
                            b1.Property<string>("InternalSpecialistCode")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("LastName");

                            b1.Property<string>("MiddleName")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("MiddleName");

                            b1.HasKey("InternalSpecialistCode");

                            b1.ToTable("InternalSpecialists");

                            b1.WithOwner()
                                .HasForeignKey("InternalSpecialistCode");

                            b1.HasData(
                                new
                                {
                                    InternalSpecialistCode = "1",
                                    FirstName = "Nathália",
                                    LastName = "Camelo"
                                });
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Omini.Opme.Domain.BusinessPartners.Hospital", b =>
                {
                    b.HasOne("Omini.Opme.Domain.Authentication.OpmeUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Omini.Opme.Domain.Authentication.OpmeUser", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.OwnsOne("Omini.Opme.Domain.ValueObjects.CompanyName", "Name", b1 =>
                        {
                            b1.Property<string>("HospitalCode")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("LegalName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("LegalName");

                            b1.Property<string>("TradeName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("TradeName");

                            b1.HasKey("HospitalCode");

                            b1.ToTable("Hospitals");

                            b1.WithOwner()
                                .HasForeignKey("HospitalCode");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Omini.Opme.Domain.BusinessPartners.InsuranceCompany", b =>
                {
                    b.HasOne("Omini.Opme.Domain.Authentication.OpmeUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Omini.Opme.Domain.Authentication.OpmeUser", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.OwnsOne("Omini.Opme.Domain.ValueObjects.CompanyName", "Name", b1 =>
                        {
                            b1.Property<string>("InsuranceCompanyCode")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("LegalName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("LegalName");

                            b1.Property<string>("TradeName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("TradeName");

                            b1.HasKey("InsuranceCompanyCode");

                            b1.ToTable("InsuranceCompanies");

                            b1.WithOwner()
                                .HasForeignKey("InsuranceCompanyCode");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Omini.Opme.Domain.BusinessPartners.Patient", b =>
                {
                    b.HasOne("Omini.Opme.Domain.Authentication.OpmeUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Omini.Opme.Domain.Authentication.OpmeUser", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.OwnsOne("Omini.Opme.Domain.ValueObjects.PersonName", "Name", b1 =>
                        {
                            b1.Property<string>("PatientCode")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("LastName");

                            b1.Property<string>("MiddleName")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("MiddleName");

                            b1.HasKey("PatientCode");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientCode");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Omini.Opme.Domain.BusinessPartners.Physician", b =>
                {
                    b.HasOne("Omini.Opme.Domain.Authentication.OpmeUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Omini.Opme.Domain.Authentication.OpmeUser", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.OwnsOne("Omini.Opme.Domain.ValueObjects.PersonName", "Name", b1 =>
                        {
                            b1.Property<string>("PhysicianCode")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("LastName");

                            b1.Property<string>("MiddleName")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("MiddleName");

                            b1.HasKey("PhysicianCode");

                            b1.ToTable("Physicians");

                            b1.WithOwner()
                                .HasForeignKey("PhysicianCode");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Omini.Opme.Domain.Sales.Quotation", b =>
                {
                    b.HasOne("Omini.Opme.Domain.Authentication.OpmeUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Omini.Opme.Domain.BusinessPartners.Hospital", null)
                        .WithMany()
                        .HasForeignKey("HospitalCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Omini.Opme.Domain.BusinessPartners.InsuranceCompany", null)
                        .WithMany()
                        .HasForeignKey("InsuranceCompanyCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Omini.Opme.Domain.BusinessPartners.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Omini.Opme.Domain.BusinessPartners.Physician", null)
                        .WithMany()
                        .HasForeignKey("PhysicianCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Omini.Opme.Domain.Authentication.OpmeUser", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.OwnsOne("Omini.Opme.Domain.ValueObjects.PersonName", "PatientName", b1 =>
                        {
                            b1.Property<Guid>("QuotationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("PatientFirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("PatientLastName");

                            b1.Property<string>("MiddleName")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("PatientMiddleName");

                            b1.HasKey("QuotationId");

                            b1.ToTable("Quotations");

                            b1.WithOwner()
                                .HasForeignKey("QuotationId");
                        });

                    b.OwnsOne("Omini.Opme.Domain.ValueObjects.PersonName", "PhysicianName", b1 =>
                        {
                            b1.Property<Guid>("QuotationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("PhysicianFirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("PhysicianLastName");

                            b1.Property<string>("MiddleName")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("PhysicianMiddleName");

                            b1.HasKey("QuotationId");

                            b1.ToTable("Quotations");

                            b1.WithOwner()
                                .HasForeignKey("QuotationId");
                        });

                    b.Navigation("PatientName")
                        .IsRequired();

                    b.Navigation("PhysicianName")
                        .IsRequired();
                });

            modelBuilder.Entity("Omini.Opme.Domain.Sales.QuotationItem", b =>
                {
                    b.HasOne("Omini.Opme.Domain.Sales.Quotation", null)
                        .WithMany("Items")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Omini.Opme.Domain.Warehouse.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Omini.Opme.Domain.Warehouse.Item", b =>
                {
                    b.HasOne("Omini.Opme.Domain.Authentication.OpmeUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Omini.Opme.Domain.Authentication.OpmeUser", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Omini.Opme.Domain.Sales.Quotation", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
